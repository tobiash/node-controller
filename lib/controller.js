// Generated by CoffeeScript 1.3.3
(function() {
  var Controller, Q, Route, beget, copyParams, prepostify, _,
    __slice = [].slice;

  _ = require("underscore")._;

  Q = require("q");

  prepostify = require('prepostify');

  beget = function(o, locals) {
    var F;
    F = function() {};
    F.prototype = o;
    return _.extend(new F, locals);
  };

  Route = require("express/lib/router/route");

  copyParams = function(route) {
    var i, key, p, params, value, _i, _len, _ref, _ref1;
    params = [];
    _ref = route.params;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      p = _ref[i];
      params[i] = p;
    }
    _ref1 = route.params;
    for (key in _ref1) {
      value = _ref1[key];
      params[key] = value;
    }
    return params;
  };

  Controller = (function() {

    Controller.RouteNotFound = (function() {

      function RouteNotFound(req) {
        this.req = req;
      }

      RouteNotFound.prototype.toString = function() {
        return "No route found for request " + req.url + "#" + req.method;
      };

      return RouteNotFound;

    })();

    function Controller(builder) {
      var actionName, actions, buildPath, pathPrefixes, prepostified, routes, scoped_filter_adder;
      this.routes = routes = [];
      prepostified = new prepostify.PrepostifiedCan;
      pathPrefixes = [];
      buildPath = function(path) {
        return pathPrefixes.concat(path).join("");
      };
      actions = {};
      actionName = function(path, action) {
        return buildPath(path) + "#" + action;
      };
      scoped_filter_adder = function(filter_adder) {
        return function() {
          var action, actions, fn, scoped_actions, _i;
          actions = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), fn = arguments[_i++];
          scoped_actions = (function() {
            var _j, _len, _results;
            _results = [];
            for (_j = 0, _len = actions.length; _j < _len; _j++) {
              action = actions[_j];
              _results.push(buildPath(action));
            }
            return _results;
          })();
          return filter_adder.apply(this, scoped_actions.concat(fn));
        };
      };
      this.pre = scoped_filter_adder(prepostified.pre);
      this.post = scoped_filter_adder(prepostified.post);
      this.can = scoped_filter_adder(prepostified.can);
      this.on = function(method, path, handler) {
        var action, route;
        if (_.isFunction(path)) {
          handler = path;
          path = "";
        }
        action = actionName(path, method);
        prepostified.on(action, handler);
        route = new Route(method, buildPath(path), []);
        routes.push(route);
        return actions[action] = route;
      };
      this.path = function(path, fn) {
        var context;
        context = beget(this, {});
        pathPrefixes.push(path);
        fn.call(context);
        return pathPrefixes.pop();
      };
      this.dispatch = function(request, context) {
        var matchRoute;
        matchRoute = function(request) {
          var name, route;
          for (name in actions) {
            route = actions[name];
            if (route.method === request.method && route.match(request.url)) {
              return [name, copyParams(route)];
            }
          }
          throw new Controller.RouteNotFound(request);
        };
        return Q.fcall(function() {
          var params, _ref;
          _ref = matchRoute(request), actionName = _ref[0], params = _ref[1];
          request.params = params;
          return prepostified.action(actionName, context)(request);
        });
      };
      if (builder != null) {
        builder.call(this);
      }
    }

    return Controller;

  })();

  module.exports = Controller;

}).call(this);
